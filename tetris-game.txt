<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>網頁版俄羅斯方塊 by Arthur chen & AI</title>
    <style>
        body {
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            margin: 0;
            font-family: Arial, sans-serif;
            background: #f0f0f0;
        }
        #game-container {
            position: relative;
            width: 360px;
        }
        #tetris {
            border: 2px solid #333;
            background-image: url('背景圖片.png');
            background-size: cover;
            background-position: center;
        }
        #score {
            position: absolute;
            top: 10px;
            left: 10px;
            font-size: 20px;
            background-color: rgba(255, 255, 255, 0.7);
            padding: 5px 10px;
            border-radius: 5px;
        }
        #instructions {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.8);
            color: white;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            text-align: center;
        }
        #instructions h1 {
            font-size: 24px;
            margin-bottom: 20px;
        }
        #instructions p {
            font-size: 16px;
            margin: 5px 0;
        }
        #start-message {
            font-size: 20px;
            margin-top: 30px;
            color: #FFD700;
        }
    #volume-control {
        position: absolute;
        bottom: -60px; /* 調整位置到遊戲視窗的底下 */
        left: 50%;
        transform: translateX(-50%);
        background-color: rgba(255, 255, 255, 0.7);
        padding: 10px;
        border-radius: 5px;
        display: flex;
        flex-direction: column;
        align-items: center;
    }
        #volume-control label {
            font-size: 14px;
            margin-bottom: 5px;
        }
    #volume-slider {
        width: 150px; /* 調整為橫向滑桿 */
        height: 8px;
    }
    </style>
</head>
<body>
    <div id="game-container">
        <canvas id="tetris" width="360" height="600"></canvas>
        <div id="score">分數: 0</div>
        <div id="instructions">
            <h1>俄羅斯方塊遊戲說明</h1>
            <p>← → : 左右移動方塊</p>
            <p>↑ : 旋轉方塊</p>
            <p>↓ : 加速下落</p>
            <p>空白鍵 : 直接落到底部</p>
            <div id="start-message">按任意鍵開始遊戲</div>
	    <div>By</div>
	    <div>Arthur chen & Ai助手</div>
        </div>
        <div id="volume-control">
            <label for="volume-slider">音量</label>
            <input type="range" id="volume-slider" min="0" max="1" step="0.01" value="0.5">
        </div>
    </div>

    <!-- 音效元素 -->
    <audio id="background-music" src="sounds/background_music.mp3" loop></audio>
    <audio id="rotate-sound" src="sounds/rotate.mp3"></audio>
    <audio id="clear-sound" src="sounds/clear.mp3"></audio>

    <script>
        const canvas = document.getElementById('tetris');
        const context = canvas.getContext('2d');
        const scoreElement = document.getElementById('score');
        const instructionsElement = document.getElementById('instructions');
        const volumeSlider = document.getElementById('volume-slider');
        const ROWS = 20;
        const COLS = 12;
        const BLOCK_SIZE = 30;
        let score = 0;
        let board = Array(ROWS).fill().map(() => Array(COLS).fill(0));
        let currentPiece = null;
        let dropCounter = 0;
        let dropInterval = 800;
        let gameOver = false;
        let gameStarted = false;
        let animationId = null;
        let lastTime = 0;
        const COLORS = [
            null,
            '#FF0D72',
            '#0DC2FF',
            '#0DFF72',
            '#F538FF',
            '#FF8E0D',
            '#FFE138',
            '#3877FF'
        ];
        const PIECES = [
            [[1, 1, 1, 1]],
            [[2, 2], [2, 2]],
            [[3, 3, 3], [0, 3, 0]],
            [[4, 4, 4], [4, 0, 0]],
            [[5, 5, 5], [0, 0, 5]],
            [[6, 6, 0], [0, 6, 6]],
            [[0, 7, 7], [7, 7, 0]]
        ];

        // 播放背景音樂
        var backgroundMusic = document.getElementById('background-music');

        // 播放旋轉方塊音效
        function playRotateSound() {
            var rotateSound = document.getElementById('rotate-sound');
            rotateSound.play();
        }

        // 播放清除橫行音效
        function playClearSound() {
            var clearSound = document.getElementById('clear-sound');
            clearSound.play();
        }

        // 控制音量
        volumeSlider.addEventListener('input', function() {
            backgroundMusic.volume = volumeSlider.value;
        });

        function createPiece() {
            const pieceIndex = Math.floor(Math.random() * PIECES.length);
            const piece = PIECES[pieceIndex];
            return {
                shape: piece,
                x: Math.floor(COLS / 2) - Math.floor(piece[0].length / 2),
                y: 0
            };
        }
        function drawBlock(x, y, color) {
            context.fillStyle = color;
            context.fillRect(x * BLOCK_SIZE, y * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);
            context.strokeStyle = '#fff';
            context.strokeRect(x * BLOCK_SIZE, y * BLOCK_SIZE, BLOCK_SIZE, BLOCK_SIZE);
        }
        function draw() {
            context.clearRect(0, 0, canvas.width, canvas.height);
            for (let y = 0; y < ROWS; y++) {
                for (let x = 0; x < COLS; x++) {
                    if (board[y][x]) {
                        drawBlock(x, y, COLORS[board[y][x]]);
                    }
                }
            }
            if (currentPiece) {
                currentPiece.shape.forEach((row, y) => {
                    row.forEach((value, x) => {
                        if (value) {
                            drawBlock(currentPiece.x + x, currentPiece.y + y, COLORS[value]);
                        }
                    });
                });
            }
        }
        function collision() {
            for (let y = 0; y < currentPiece.shape.length; y++) {
                for (let x = 0; x < currentPiece.shape[y].length; x++) {
                    if (currentPiece.shape[y][x] &&
                        (board[y + currentPiece.y] &&
                        board[y + currentPiece.y][x + currentPiece.x]) !== 0) {
                        return true;
                    }
                }
            }
            return false;
        }
        function merge() {
            currentPiece.shape.forEach((row, y) => {
                row.forEach((value, x) => {
                    if (value) {
                        board[y + currentPiece.y][x + currentPiece.x] = value;
                    }
                });
            });
        }
        function clearLines() {
            let linesCleared = 0;
            for (let y = ROWS - 1; y >= 0; y--) {
                if (board[y].every(value => value !== 0)) {
                    board.splice(y, 1);
                    board.unshift(Array(COLS).fill(0));
                    linesCleared++;
                }
            }
            if (linesCleared > 0) {
                score += linesCleared * 100;
                updateScore();
                playClearSound(); // 播放清除橫行音效
            }
        }
        function updateScore() {
            scoreElement.textContent = `分數: ${score}`;
        }
        function moveDown() {
            currentPiece.y++;
            if (collision()) {
                currentPiece.y--;
                merge();
                clearLines();
                currentPiece = createPiece();
                if (collision()) {
                    gameOver = true;
                    endGame();
                }
            }
            dropCounter = 0;
        }

        function moveLeft() {
            currentPiece.x--;
            if (collision()) {
                currentPiece.x++;
            }
        }

        function moveRight() {
            currentPiece.x++;
            if (collision()) {
                currentPiece.x--;
            }
        }

        function rotate() {
            const originalShape = currentPiece.shape;
            currentPiece.shape = currentPiece.shape[0].map((_, index) =>
                currentPiece.shape.map(row => row[index])
            ).reverse();
            if (collision()) {
                currentPiece.shape = originalShape;
            } else {
                playRotateSound(); // 播放旋轉方塊音效
            }
        }

        function hardDrop() {
            while (!collision()) {
                currentPiece.y++;
            }
            currentPiece.y--;
            merge();
            clearLines();
            currentPiece = createPiece();
            if (collision()) {
                gameOver = true;
                endGame();
            }
        }

        function endGame() {
            cancelAnimationFrame(animationId);
            alert('遊戲結束！你的分數是：' + score);
            resetGame();
        }

        function resetGame() {
            board = Array(ROWS).fill().map(() => Array(COLS).fill(0));
            score = 0;
            gameOver = false;
            gameStarted = false;
            instructionsElement.style.display = 'flex';
        }

        function update(time = 0) {
            const deltaTime = time - lastTime;
            lastTime = time;
            dropCounter += deltaTime;
            if (dropCounter > dropInterval) {
                moveDown();
            }
            draw();
            if (!gameOver) {
                animationId = requestAnimationFrame(update);
            }
        }

        function startGame() {
            if (!gameStarted) {
                instructionsElement.style.display = 'none';
                gameStarted = true;
                currentPiece = createPiece();
                updateScore();
                backgroundMusic.play(); // 播放背景音樂
                update();
            }
        }

        document.addEventListener('keydown', event => {
            if (!gameStarted) {
                startGame();
                return;
            }
            if (gameOver) return;
            switch (event.key) {
                case 'ArrowLeft':
                    moveLeft();
                    break;
                case 'ArrowRight':
                    moveRight();
                    break;
                case 'ArrowUp':
                    rotate();
                    break;
                case 'ArrowDown':
                    moveDown();
                    break;
                case ' ':
                    hardDrop();
                    break;
            }
        });
    </script>
</body>
</html>